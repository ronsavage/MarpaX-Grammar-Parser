statements. Attributes: {}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => ":default"}
    |    |--- rhs. Attributes: {token => "action"}
    |    |    |--- array_descriptor. Attributes: {op => "=>", token => "[values]"}
    |    |--- bless. Attributes: {token => "bless"}
    |         |--- reserved_blessing_name. Attributes: {op => "=>", token => "::lhs"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "=", token => "lexeme default"}
    |    |--- rhs. Attributes: {token => "action"}
    |    |    |--- array_descriptor. Attributes: {op => "=>", token => "[start,length,value]"}
    |    |--- latm_specification. Attributes: {op => "=>", token => "latm"}
    |         |--- boolean. Attributes: {op => "=>", token => "1"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => ":start"}
    |    |--- blessing_name. Attributes: {op => "", token => "translationUnit"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "primaryExpression"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "constant"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "string"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "genericSelection"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccStatementExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "constant"}
    |    |--- rhs. Attributes: {op => "", token => "I_CONSTANT"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "F_CONSTANT"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ENUMERATION_CONSTANT"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<enumerationConstantIdentifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "enumerationConstantIdentifier"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "enumerationConstant"}
    |    |--- rhs. Attributes: {op => "", token => "enumerationConstantIdentifier"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "stringLiteral"}
    |    |--- rhs. Attributes: {op => "", token => "STRING_LITERAL_UNIT"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "string"}
    |    |--- rhs. Attributes: {op => "", token => "stringLiteral"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "FUNC_NAME"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "genericSelection"}
    |    |--- rhs. Attributes: {op => "", token => "GENERIC"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "genericAssocList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "genericAssocList"}
    |    |--- rhs. Attributes: {op => "", token => "genericAssociation"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "genericAssocList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "genericAssociation"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "genericAssociation"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "DEFAULT"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "primaryExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "argumentExpressionList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccBuiltinVaStart"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccBuiltinVaEnd"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccBuiltinVaArg"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccBuiltinOffsetof"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "DOT"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "PTR_OP"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "INC_OP"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- rhs. Attributes: {op => "", token => "DEC_OP"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "initializerList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "initializerList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "argumentExpressionList"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "argumentExpressionList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "argumentExpressionList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAlignofExpression"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "unaryExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "unaryExpression"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |    |--- rhs. Attributes: {op => "", token => "postfixExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "INC_OP"}
    |    |--- rhs. Attributes: {op => "", token => "unaryExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "DEC_OP"}
    |    |--- rhs. Attributes: {op => "", token => "unaryExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "unaryOperator"}
    |    |--- rhs. Attributes: {op => "", token => "castExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "SIZEOF"}
    |    |--- rhs. Attributes: {op => "", token => "unaryExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "SIZEOF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccAlignofExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "unaryOperator"}
    |    |--- rhs. Attributes: {op => "", token => "AMPERSAND"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "PLUS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "HYPHEN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "TILDE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "EXCLAMATION"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "castExpression"}
    |    |--- rhs. Attributes: {op => "", token => "unaryExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "castExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "multiplicativeExpression"}
    |    |--- rhs. Attributes: {op => "", token => "castExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "multiplicativeExpression"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "castExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "multiplicativeExpression"}
    |    |--- rhs. Attributes: {op => "", token => "SLASH"}
    |    |--- rhs. Attributes: {op => "", token => "castExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "multiplicativeExpression"}
    |    |--- rhs. Attributes: {op => "", token => "PERCENT"}
    |    |--- rhs. Attributes: {op => "", token => "castExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "additiveExpression"}
    |    |--- rhs. Attributes: {op => "", token => "multiplicativeExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "additiveExpression"}
    |    |--- rhs. Attributes: {op => "", token => "PLUS"}
    |    |--- rhs. Attributes: {op => "", token => "multiplicativeExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "additiveExpression"}
    |    |--- rhs. Attributes: {op => "", token => "HYPHEN"}
    |    |--- rhs. Attributes: {op => "", token => "multiplicativeExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "shiftExpression"}
    |    |--- rhs. Attributes: {op => "", token => "additiveExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "shiftExpression"}
    |    |--- rhs. Attributes: {op => "", token => "LEFT_OP"}
    |    |--- rhs. Attributes: {op => "", token => "additiveExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "shiftExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RIGHT_OP"}
    |    |--- rhs. Attributes: {op => "", token => "additiveExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "relationalExpression"}
    |    |--- rhs. Attributes: {op => "", token => "shiftExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "relationalExpression"}
    |    |--- rhs. Attributes: {op => "", token => "LESS_THAN"}
    |    |--- rhs. Attributes: {op => "", token => "shiftExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "relationalExpression"}
    |    |--- rhs. Attributes: {op => "", token => "GREATER_THAN"}
    |    |--- rhs. Attributes: {op => "", token => "shiftExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "relationalExpression"}
    |    |--- rhs. Attributes: {op => "", token => "LE_OP"}
    |    |--- rhs. Attributes: {op => "", token => "shiftExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "relationalExpression"}
    |    |--- rhs. Attributes: {op => "", token => "GE_OP"}
    |    |--- rhs. Attributes: {op => "", token => "shiftExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "equalityExpression"}
    |    |--- rhs. Attributes: {op => "", token => "relationalExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "equalityExpression"}
    |    |--- rhs. Attributes: {op => "", token => "EQ_OP"}
    |    |--- rhs. Attributes: {op => "", token => "relationalExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "equalityExpression"}
    |    |--- rhs. Attributes: {op => "", token => "NE_OP"}
    |    |--- rhs. Attributes: {op => "", token => "relationalExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "andExpression"}
    |    |--- rhs. Attributes: {op => "", token => "equalityExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "andExpression"}
    |    |--- rhs. Attributes: {op => "", token => "AMPERSAND"}
    |    |--- rhs. Attributes: {op => "", token => "equalityExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "exclusiveOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "andExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "exclusiveOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "CARET"}
    |    |--- rhs. Attributes: {op => "", token => "andExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "inclusiveOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "exclusiveOrExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "inclusiveOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "VERTICAL_BAR"}
    |    |--- rhs. Attributes: {op => "", token => "exclusiveOrExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "logicalAndExpression"}
    |    |--- rhs. Attributes: {op => "", token => "inclusiveOrExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "logicalAndExpression"}
    |    |--- rhs. Attributes: {op => "", token => "AND_OP"}
    |    |--- rhs. Attributes: {op => "", token => "inclusiveOrExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "logicalOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "logicalAndExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "logicalOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "OR_OP"}
    |    |--- rhs. Attributes: {op => "", token => "logicalAndExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "conditionalExpression"}
    |    |--- rhs. Attributes: {op => "", token => "logicalOrExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "logicalOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "QUESTION_MARK"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "logicalOrExpression"}
    |    |--- rhs. Attributes: {op => "", token => "QUESTION_MARK"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "conditionalExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "castExpression"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentOperator"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "assignmentOperator"}
    |    |--- rhs. Attributes: {op => "", token => "EQUAL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MUL_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "DIV_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MOD_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ADD_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "SUB_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LEFT_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "RIGHT_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "AND_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "XOR_ASSIGN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "OR_ASSIGN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "constantExpression"}
    |    |--- rhs. Attributes: {op => "", token => "conditionalExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<declarationCheckdeclarationSpecifiers>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarationCheckdeclarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<declarationCheckinitDeclaratorList>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarationCheckinitDeclaratorList"}
    |    |--- rhs. Attributes: {op => "", token => "initDeclaratorList"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<declarationCheck>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarationCheck"}
    |    |--- rhs. Attributes: {op => "", token => "declarationCheckdeclarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "declarationCheckinitDeclaratorList"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declaration"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationCheck"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "staticAssertDeclaration"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccExtension"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_EXTENSION"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers2"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "storageClassSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "storageClassSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "functionSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "functionSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "alignmentSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "alignmentSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarationSpecifiers1"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers1"}
    |    |--- rhs. Attributes: {op => "", token => "storageClassSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers1"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers1"}
    |    |--- rhs. Attributes: {op => "", token => "functionSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers1"}
    |    |--- rhs. Attributes: {op => "", token => "alignmentSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers1"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarationSpecifiers2"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier2"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers0"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier2"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers2"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier2"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers2"}
    |    |--- rhs. Attributes: {op => "", token => "storageClassSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers2"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers2"}
    |    |--- rhs. Attributes: {op => "", token => "functionSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers2"}
    |    |--- rhs. Attributes: {op => "", token => "alignmentSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers2"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "initDeclaratorList"}
    |    |--- rhs. Attributes: {op => "", token => "initDeclarator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "initDeclaratorList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "initDeclarator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "initDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "declarator"}
    |    |--- rhs. Attributes: {op => "", token => "EQUAL"}
    |    |--- rhs. Attributes: {op => "", token => "initializer"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<storageClassSpecifierTypedef>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "storageClassSpecifierTypedef"}
    |    |--- rhs. Attributes: {op => "", token => "TYPEDEF"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "storageClassSpecifier"}
    |    |--- rhs. Attributes: {op => "", token => "storageClassSpecifierTypedef"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "EXTERN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "THREAD_LOCAL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "AUTO"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "REGISTER"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "typeSpecifier1"}
    |    |--- rhs. Attributes: {op => "", token => "VOID"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "FLOAT"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "structOrUnionSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "enumSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "TYPEDEF_NAME"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "typeSpecifier2"}
    |    |--- rhs. Attributes: {op => "", token => "CHAR"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "SHORT"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "INT"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LONG"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "DOUBLE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "SIGNED"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "UNSIGNED"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "BOOL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LABEL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COMPLEX"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "IMAGINARY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "atomicTypeSpecifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "msvsBuiltinType"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccBuiltinType"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<structContextStart>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "structContextStart"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<structContextEnd>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "structContextEnd"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "structOrUnionSpecifier"}
    |    |--- rhs. Attributes: {op => "", token => "structOrUnion"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "<structContextStart>"}
    |    |--- rhs. Attributes: {op => "", token => "structDeclarationList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "<structContextEnd>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "structOrUnion"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "<structContextStart>"}
    |    |--- rhs. Attributes: {op => "", token => "structDeclarationList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "<structContextEnd>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "structOrUnion"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "structOrUnion"}
    |    |--- rhs. Attributes: {op => "", token => "STRUCT"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "UNION"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "structDeclarationList"}
    |    |--- rhs. Attributes: {op => "", token => "structDeclaration"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "structDeclaration"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList"}
    |    |--- rhs. Attributes: {op => "", token => "structDeclaratorList"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "specifierQualifierList"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList0"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList2"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "specifierQualifierList0"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList0"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList0"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "specifierQualifierList1"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList0"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList1"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList1"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "specifierQualifierList2"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier2"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList0"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier2"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList2"}
    |    |--- rhs. Attributes: {op => "", token => "typeSpecifier2"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList2"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList2"}
    |    |--- rhs. Attributes: {op => "", token => "gccExtension"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "structDeclaratorList"}
    |    |--- rhs. Attributes: {op => "", token => "structDeclarator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "structDeclaratorList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "structDeclarator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "structDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarator"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declarator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "enumSpecifier"}
    |    |--- rhs. Attributes: {op => "", token => "ENUM"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "enumeratorList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ENUM"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "enumeratorList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ENUM"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "enumeratorList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ENUM"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "enumeratorList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ENUM"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "enumeratorList"}
    |    |--- rhs. Attributes: {op => "", token => "enumerator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "enumeratorList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "enumerator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "enumerator"}
    |    |--- rhs. Attributes: {op => "", token => "enumerationConstant"}
    |    |--- rhs. Attributes: {op => "", token => "EQUAL"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "enumerationConstant"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "atomicTypeSpecifier"}
    |    |--- rhs. Attributes: {op => "", token => "ATOMIC"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "typeQualifier"}
    |    |--- rhs. Attributes: {op => "", token => "CONST"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "RESTRICT"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "VOLATILE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ATOMIC"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_W64"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_PTR32"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_PTR64"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "functionSpecifier"}
    |    |--- rhs. Attributes: {op => "", token => "INLINE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "NORETURN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "alignmentSpecifier"}
    |    |--- rhs. Attributes: {op => "", token => "ALIGNAS"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "ALIGNAS"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttribute"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "declarator"}
    |    |--- rhs. Attributes: {op => "", token => "pointer"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "pointer"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS___C_ASSERT__"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<directDeclaratorIdentifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "directDeclaratorIdentifier"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclaratorIdentifier"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "declarator"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "parameterTypeList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN_SCOPE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN_SCOPE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "identifierList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN_SCOPE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "pointerQualifier"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "pointerQualifierList"}
    |    |--- rhs. Attributes: {op => "", token => "pointerQualifier"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "pointer"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "pointerQualifierList"}
    |    |--- rhs. Attributes: {op => "", token => "pointer"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "pointerQualifierList"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "pointer"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifier"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "parameterTypeList"}
    |    |--- rhs. Attributes: {op => "", token => "parameterList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "ELLIPSIS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "parameterList"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "parameterList"}
    |    |--- rhs. Attributes: {op => "", token => "parameterDeclaration"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "parameterList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "parameterDeclaration"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<parameterDeclarationdeclarationSpecifiers>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "parameterDeclarationdeclarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<parameterDeclarationCheck>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "parameterDeclarationCheck"}
    |    |--- rhs. Attributes: {op => "", token => "parameterDeclarationdeclarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "parameterDeclarationCheckDeclarator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<parameterDeclarationCheckDeclarator>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "parameterDeclarationCheckDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "declarator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "parameterDeclaration"}
    |    |--- rhs. Attributes: {op => "", token => "parameterDeclarationCheck"}
    |    |--- rank_specification. Attributes: {op => "", token => "rank_specification"}
    |    |    |--- rank. Attributes: {op => "=>", token => "0"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rank. Attributes: {op => "=>", token => "declarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "abstractDeclarator"}
    |    |--- rank_specification. Attributes: {op => "", token => "rank_specification"}
    |    |    |--- rank. Attributes: {op => "=>", token => "-1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rank. Attributes: {op => "=>", token => "declarationSpecifiers"}
    |    |--- rank_specification. Attributes: {op => "", token => "rank_specification"}
    |         |--- rank. Attributes: {op => "=>", token => "-2"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "identifierList"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "identifierList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList"}
    |    |--- rhs. Attributes: {op => "", token => "abstractDeclarator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "specifierQualifierList"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "abstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "pointer"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "pointer"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmExpression"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "pointer"}
    |    |--- rhs. Attributes: {op => "", token => "msvsAttributeAny"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "abstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "gccArrayTypeModifierList"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN_SCOPE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "parameterTypeList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN_SCOPE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN_SCOPE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "directAbstractDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "parameterTypeList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN_SCOPE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "initializer"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "initializerList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "initializerList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "initializerList"}
    |    |--- rhs. Attributes: {op => "", token => "designation"}
    |    |--- rhs. Attributes: {op => "", token => "initializer"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "initializer"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "initializer"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "initializerList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "designation"}
    |    |--- rhs. Attributes: {op => "", token => "initializer"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "initializerList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "initializer"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "designation"}
    |    |--- rhs. Attributes: {op => "", token => "designatorList"}
    |    |--- rhs. Attributes: {op => "", token => "EQUAL"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "designatorList"}
    |    |--- rhs. Attributes: {op => "", token => "designator"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "designator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "DOT"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- rhs. Attributes: {op => "", token => "ELLIPSIS"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "staticAssertDeclaration"}
    |    |--- rhs. Attributes: {op => "", token => "STATIC_ASSERT"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "stringLiteral"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "labeledStatement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "compoundStatement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "expressionStatement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "selectionStatement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "iterationStatement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "jumpStatement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "opaqueAsmStatement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmStatement"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "labeledStatement"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "CASE"}
    |    |--- rhs. Attributes: {op => "", token => "constantExpression"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "DEFAULT"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "compoundStatement"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY_SCOPE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "blockItemList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY_SCOPE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "blockItemList"}
    |    |--- rhs. Attributes: {op => "", token => "blockItem"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "blockItem"}
    |    |--- rhs. Attributes: {op => "", token => "declaration"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "expressionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "selectionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "IF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "ELSE"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "IF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- rank_specification. Attributes: {op => "", token => "rank_specification"}
    |    |    |--- rank. Attributes: {op => "=>", token => "1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rank. Attributes: {op => "=>", token => "SWITCH"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "iterationStatement"}
    |    |--- rhs. Attributes: {op => "", token => "WHILE"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "DO"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "WHILE"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "FOR"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expressionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "expressionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "FOR"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expressionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "expressionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "FOR"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "declaration"}
    |    |--- rhs. Attributes: {op => "", token => "expressionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "FOR"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "declaration"}
    |    |--- rhs. Attributes: {op => "", token => "expressionStatement"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "statement"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "jumpStatement"}
    |    |--- rhs. Attributes: {op => "", token => "GOTO"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "CONTINUE"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "BREAK"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "RETURN"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "RETURN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<translationUnit>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "translationUnit"}
    |    |--- rhs. Attributes: {op => "", token => "externalDeclaration"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<externalDeclaration>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "externalDeclaration"}
    |    |--- rhs. Attributes: {op => "", token => "functionDefinition"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "declaration"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "compoundStatementReenterScope"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY_REENTERSCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY_SCOPE"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LCURLY_REENTERSCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "blockItemList"}
    |    |--- rhs. Attributes: {op => "", token => "RCURLY_SCOPE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "functionDefinition"}
    |    |--- rhs. Attributes: {op => "", token => "functionDefinitionCheck1"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "functionDefinitionCheck2"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<fileScopeDeclarator>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "fileScopeDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "declarator"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<functionDefinitionCheck1>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "functionDefinitionCheck1"}
    |    |--- rhs. Attributes: {op => "", token => "functionDefinitionCheck1declarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "fileScopeDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "functionDefinitionCheck1declarationList"}
    |    |--- rhs. Attributes: {op => "", token => "compoundStatementReenterScope"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<functionDefinitionCheck2>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "functionDefinitionCheck2"}
    |    |--- rhs. Attributes: {op => "", token => "functionDefinitionCheck2declarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "fileScopeDeclarator"}
    |    |--- rhs. Attributes: {op => "", token => "compoundStatementReenterScope"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<functionDefinitionCheck1declarationSpecifiers>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "functionDefinitionCheck1declarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<functionDefinitionCheck2declarationSpecifiers>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "functionDefinitionCheck2declarationSpecifiers"}
    |    |--- rhs. Attributes: {op => "", token => "declarationSpecifiers"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "<functionDefinitionCheck1declarationList>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "functionDefinitionCheck1declarationList"}
    |    |--- rhs. Attributes: {op => "", token => "declarationList"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "declarationList"}
    |    |--- rhs. Attributes: {op => "", token => "declaration"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "O"}
    |    |--- rhs. Attributes: {op => "", token => "[0-7]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "O_any"}
    |    |--- rhs. Attributes: {op => "", token => "O"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "D"}
    |    |--- rhs. Attributes: {op => "", token => "[0-9]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "D_any"}
    |    |--- rhs. Attributes: {op => "", token => "D"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "D_many"}
    |    |--- rhs. Attributes: {op => "", token => "D"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "NZ"}
    |    |--- rhs. Attributes: {op => "", token => "[1-9]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "L"}
    |    |--- rhs. Attributes: {op => "", token => "[a-zA-Z_]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "A"}
    |    |--- rhs. Attributes: {op => "", token => "[a-zA-Z_0-9]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "A_any"}
    |    |--- rhs. Attributes: {op => "", token => "A"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "H"}
    |    |--- rhs. Attributes: {op => "", token => "[a-fA-F0-9]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "H_any"}
    |    |--- rhs. Attributes: {op => "", token => "H"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "H"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "'0'"}
    |    |--- rhs. Attributes: {op => "", token => "[xX]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "B"}
    |    |--- rhs. Attributes: {op => "", token => "[0-1]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "B_many"}
    |    |--- rhs. Attributes: {op => "", token => "B"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "BP"}
    |    |--- rhs. Attributes: {op => "", token => "'0'"}
    |    |--- rhs. Attributes: {op => "", token => "[bB]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SIGN_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "[+-]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "SIGN_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "E"}
    |    |--- rhs. Attributes: {op => "", token => "[Ee]"}
    |    |--- rhs. Attributes: {op => "", token => "SIGN_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "E_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "E"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "E_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "P"}
    |    |--- rhs. Attributes: {op => "", token => "[Pp]"}
    |    |--- rhs. Attributes: {op => "", token => "SIGN_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "FS"}
    |    |--- rhs. Attributes: {op => "", token => "[fFlL]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "FS_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "FS"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LL"}
    |    |--- rhs. Attributes: {op => "", token => "'ll'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'LL'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "[lL]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LL_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "LL"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "LL_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "U"}
    |    |--- rhs. Attributes: {op => "", token => "[uU]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "U_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "U"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "U_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "IS"}
    |    |--- rhs. Attributes: {op => "", token => "U"}
    |    |--- rhs. Attributes: {op => "", token => "LL_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "LL"}
    |    |--- rhs. Attributes: {op => "", token => "U_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "IS_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "IS"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CP"}
    |    |--- rhs. Attributes: {op => "", token => "[uUL]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CP_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "CP"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "CP_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SP"}
    |    |--- rhs. Attributes: {op => "", token => "'u8'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "[uUL]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SP_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "SP"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- rhs. Attributes: {op => "", token => "SP_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ES_AFTERBS"}
    |    |--- rhs. Attributes: {op => "", token => "[\'\"\?\\abfnrtv]"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "O"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "O"}
    |    |--- rhs. Attributes: {op => "", token => "O"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "O"}
    |    |--- rhs. Attributes: {op => "", token => "O"}
    |    |--- rhs. Attributes: {op => "", token => "O"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'x'"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ES"}
    |    |--- rhs. Attributes: {op => "", token => "BS"}
    |    |--- rhs. Attributes: {op => "", token => "ES_AFTERBS"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "WS"}
    |    |--- rhs. Attributes: {op => "", token => "[ \t\v\n\f]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "WS"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "WS_many"}
    |    |--- rhs. Attributes: {op => "", token => "WS"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<AUTO>"}
    |         |--- priority. Attributes: {op => "", token => "-1"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "AUTO"}
    |    |--- rhs. Attributes: {op => "", token => "'auto'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<BREAK>"}
    |         |--- priority. Attributes: {op => "", token => "-2"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "BREAK"}
    |    |--- rhs. Attributes: {op => "", token => "'break'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<CASE>"}
    |         |--- priority. Attributes: {op => "", token => "-3"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CASE"}
    |    |--- rhs. Attributes: {op => "", token => "'case'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<CHAR>"}
    |         |--- priority. Attributes: {op => "", token => "-4"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CHAR"}
    |    |--- rhs. Attributes: {op => "", token => "'char'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<CONST>"}
    |         |--- priority. Attributes: {op => "", token => "-5"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CONST"}
    |    |--- rhs. Attributes: {op => "", token => "'const'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CONST"}
    |    |--- rhs. Attributes: {op => "", token => "'__const'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CONST"}
    |    |--- rhs. Attributes: {op => "", token => "'const__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CONST"}
    |    |--- rhs. Attributes: {op => "", token => "'__const__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<CONTINUE>"}
    |         |--- priority. Attributes: {op => "", token => "-6"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CONTINUE"}
    |    |--- rhs. Attributes: {op => "", token => "'continue'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<DEFAULT>"}
    |         |--- priority. Attributes: {op => "", token => "-7"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "DEFAULT"}
    |    |--- rhs. Attributes: {op => "", token => "'default'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<DO>"}
    |         |--- priority. Attributes: {op => "", token => "-8"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "DO"}
    |    |--- rhs. Attributes: {op => "", token => "'do'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<DOUBLE>"}
    |         |--- priority. Attributes: {op => "", token => "-9"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "DOUBLE"}
    |    |--- rhs. Attributes: {op => "", token => "'double'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ELSE>"}
    |         |--- priority. Attributes: {op => "", token => "-10"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ELSE"}
    |    |--- rhs. Attributes: {op => "", token => "'else'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ENUM>"}
    |         |--- priority. Attributes: {op => "", token => "-11"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ENUM"}
    |    |--- rhs. Attributes: {op => "", token => "'enum'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<EXTERN>"}
    |         |--- priority. Attributes: {op => "", token => "-12"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "EXTERN"}
    |    |--- rhs. Attributes: {op => "", token => "'extern'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<FLOAT>"}
    |         |--- priority. Attributes: {op => "", token => "-13"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "FLOAT"}
    |    |--- rhs. Attributes: {op => "", token => "'float'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<FOR>"}
    |         |--- priority. Attributes: {op => "", token => "-14"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "FOR"}
    |    |--- rhs. Attributes: {op => "", token => "'for'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GOTO>"}
    |         |--- priority. Attributes: {op => "", token => "-15"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GOTO"}
    |    |--- rhs. Attributes: {op => "", token => "'goto'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<IF>"}
    |         |--- priority. Attributes: {op => "", token => "-16"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "IF"}
    |    |--- rhs. Attributes: {op => "", token => "'if'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<INLINE>"}
    |         |--- priority. Attributes: {op => "", token => "-17"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "INLINE"}
    |    |--- rhs. Attributes: {op => "", token => "'inline'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "INLINE"}
    |    |--- rhs. Attributes: {op => "", token => "'__inline__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "INLINE"}
    |    |--- rhs. Attributes: {op => "", token => "'inline__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "INLINE"}
    |    |--- rhs. Attributes: {op => "", token => "'__inline'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "INLINE"}
    |    |--- rhs. Attributes: {op => "", token => "'__forceinline'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<INT>"}
    |         |--- priority. Attributes: {op => "", token => "-18"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "INT"}
    |    |--- rhs. Attributes: {op => "", token => "'int'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LONG>"}
    |         |--- priority. Attributes: {op => "", token => "-19"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LONG"}
    |    |--- rhs. Attributes: {op => "", token => "'long'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<REGISTER>"}
    |         |--- priority. Attributes: {op => "", token => "-20"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "REGISTER"}
    |    |--- rhs. Attributes: {op => "", token => "'register'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RESTRICT>"}
    |         |--- priority. Attributes: {op => "", token => "-21"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RESTRICT"}
    |    |--- rhs. Attributes: {op => "", token => "'restrict'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RESTRICT"}
    |    |--- rhs. Attributes: {op => "", token => "'__restrict'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RESTRICT"}
    |    |--- rhs. Attributes: {op => "", token => "'restrict__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RESTRICT"}
    |    |--- rhs. Attributes: {op => "", token => "'__restrict__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RETURN>"}
    |         |--- priority. Attributes: {op => "", token => "-22"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RETURN"}
    |    |--- rhs. Attributes: {op => "", token => "'return'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<SHORT>"}
    |         |--- priority. Attributes: {op => "", token => "-23"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SHORT"}
    |    |--- rhs. Attributes: {op => "", token => "'short'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<SIGNED>"}
    |         |--- priority. Attributes: {op => "", token => "-24"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SIGNED"}
    |    |--- rhs. Attributes: {op => "", token => "'signed'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SIGNED"}
    |    |--- rhs. Attributes: {op => "", token => "'__signed'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SIGNED"}
    |    |--- rhs. Attributes: {op => "", token => "'__signed__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<SIZEOF>"}
    |         |--- priority. Attributes: {op => "", token => "-25"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SIZEOF"}
    |    |--- rhs. Attributes: {op => "", token => "'sizeof'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<STATIC>"}
    |         |--- priority. Attributes: {op => "", token => "-26"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STATIC"}
    |    |--- rhs. Attributes: {op => "", token => "'static'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<STRUCT>"}
    |         |--- priority. Attributes: {op => "", token => "-27"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STRUCT"}
    |    |--- rhs. Attributes: {op => "", token => "'struct'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<SWITCH>"}
    |         |--- priority. Attributes: {op => "", token => "-28"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SWITCH"}
    |    |--- rhs. Attributes: {op => "", token => "'switch'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<TYPEDEF>"}
    |         |--- priority. Attributes: {op => "", token => "-29"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "TYPEDEF"}
    |    |--- rhs. Attributes: {op => "", token => "'typedef'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<UNION>"}
    |         |--- priority. Attributes: {op => "", token => "-30"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "UNION"}
    |    |--- rhs. Attributes: {op => "", token => "'union'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<UNSIGNED>"}
    |         |--- priority. Attributes: {op => "", token => "-31"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "UNSIGNED"}
    |    |--- rhs. Attributes: {op => "", token => "'unsigned'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "UNSIGNED"}
    |    |--- rhs. Attributes: {op => "", token => "'__unsigned'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "UNSIGNED"}
    |    |--- rhs. Attributes: {op => "", token => "'__unsigned__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<VOID>"}
    |         |--- priority. Attributes: {op => "", token => "-32"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "VOID"}
    |    |--- rhs. Attributes: {op => "", token => "'void'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<VOLATILE>"}
    |         |--- priority. Attributes: {op => "", token => "-33"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "VOLATILE"}
    |    |--- rhs. Attributes: {op => "", token => "'volatile'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "VOLATILE"}
    |    |--- rhs. Attributes: {op => "", token => "'__volatile'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "VOLATILE"}
    |    |--- rhs. Attributes: {op => "", token => "'volatile__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "VOLATILE"}
    |    |--- rhs. Attributes: {op => "", token => "'__volatile__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<WHILE>"}
    |         |--- priority. Attributes: {op => "", token => "-34"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "WHILE"}
    |    |--- rhs. Attributes: {op => "", token => "'while'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ALIGNAS>"}
    |         |--- priority. Attributes: {op => "", token => "-35"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ALIGNAS"}
    |    |--- rhs. Attributes: {op => "", token => "'_Alignas'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ALIGNOF>"}
    |         |--- priority. Attributes: {op => "", token => "-36"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "'_Alignof'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ATOMIC>"}
    |         |--- priority. Attributes: {op => "", token => "-37"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ATOMIC"}
    |    |--- rhs. Attributes: {op => "", token => "'_Atomic'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<BOOL>"}
    |         |--- priority. Attributes: {op => "", token => "-38"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "BOOL"}
    |    |--- rhs. Attributes: {op => "", token => "'_Bool'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LABEL>"}
    |         |--- priority. Attributes: {op => "", token => "-38"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LABEL"}
    |    |--- rhs. Attributes: {op => "", token => "'__label__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<COMPLEX>"}
    |         |--- priority. Attributes: {op => "", token => "-39"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "COMPLEX"}
    |    |--- rhs. Attributes: {op => "", token => "'_Complex'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "COMPLEX"}
    |    |--- rhs. Attributes: {op => "", token => "'__complex'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "COMPLEX"}
    |    |--- rhs. Attributes: {op => "", token => "'__complex__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GENERIC>"}
    |         |--- priority. Attributes: {op => "", token => "-40"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GENERIC"}
    |    |--- rhs. Attributes: {op => "", token => "'_Generic'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<IMAGINARY>"}
    |         |--- priority. Attributes: {op => "", token => "-41"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "IMAGINARY"}
    |    |--- rhs. Attributes: {op => "", token => "'_Imaginary'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<NORETURN>"}
    |         |--- priority. Attributes: {op => "", token => "-42"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "NORETURN"}
    |    |--- rhs. Attributes: {op => "", token => "'_Noreturn'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<STATIC_ASSERT>"}
    |         |--- priority. Attributes: {op => "", token => "-43"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STATIC_ASSERT"}
    |    |--- rhs. Attributes: {op => "", token => "'_Static_assert'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<THREAD_LOCAL>"}
    |         |--- priority. Attributes: {op => "", token => "-44"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "THREAD_LOCAL"}
    |    |--- rhs. Attributes: {op => "", token => "'_Thread_local'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "THREAD_LOCAL"}
    |    |--- rhs. Attributes: {op => "", token => "'__thread'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<FUNC_NAME>"}
    |         |--- priority. Attributes: {op => "", token => "-45"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "FUNC_NAME"}
    |    |--- rhs. Attributes: {op => "", token => "'__func__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<TYPEDEF_NAME>"}
    |         |--- priority. Attributes: {op => "", token => "-100"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ENUMERATION_CONSTANT>"}
    |         |--- priority. Attributes: {op => "", token => "-100"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<IDENTIFIER>"}
    |         |--- priority. Attributes: {op => "", token => "-100"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<IDENTIFIER_UNAMBIGUOUS>"}
    |         |--- priority. Attributes: {op => "", token => "-100"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_IDENTIFIER"}
    |    |--- rhs. Attributes: {op => "", token => "L"}
    |    |--- rhs. Attributes: {op => "", token => "A_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "TYPEDEF_NAME"}
    |    |--- rhs. Attributes: {op => "", token => "_IDENTIFIER"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ENUMERATION_CONSTANT"}
    |    |--- rhs. Attributes: {op => "", token => "_IDENTIFIER"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "IDENTIFIER"}
    |    |--- rhs. Attributes: {op => "", token => "_IDENTIFIER"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- rhs. Attributes: {op => "", token => "_IDENTIFIER"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<I_CONSTANT>"}
    |         |--- priority. Attributes: {op => "", token => "-101"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "I_CONSTANT"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "BP"}
    |    |--- rhs. Attributes: {op => "", token => "B_many"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "NZ"}
    |    |--- rhs. Attributes: {op => "", token => "D_any"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'0'"}
    |    |--- rhs. Attributes: {op => "", token => "O_any"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "CP_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "QUOTE"}
    |    |--- rhs. Attributes: {op => "", token => "I_CONSTANT_INSIDE_many"}
    |    |--- rhs. Attributes: {op => "", token => "QUOTE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<F_CONSTANT>"}
    |         |--- priority. Attributes: {op => "", token => "-102"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "F_CONSTANT"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |    |--- rhs. Attributes: {op => "", token => "E"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "D_any"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |    |--- rhs. Attributes: {op => "", token => "E_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "E_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "P"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_any"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "P"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "P"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<STRING_LITERAL_UNIT>"}
    |         |--- priority. Attributes: {op => "", token => "-103"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STRING_LITERAL_INSIDE"}
    |    |--- rhs. Attributes: {op => "", token => "[^"\\\n]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STRING_LITERAL_INSIDE"}
    |    |--- rhs. Attributes: {op => "", token => "ES"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "STRING_LITERAL_INSIDE_any"}
    |    |--- rhs. Attributes: {op => "", token => "STRING_LITERAL_INSIDE"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STRING_LITERAL_UNIT"}
    |    |--- rhs. Attributes: {op => "", token => "SP_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "'"'"}
    |    |--- rhs. Attributes: {op => "", token => "STRING_LITERAL_INSIDE_any"}
    |    |--- rhs. Attributes: {op => "", token => "'"'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ELLIPSIS>"}
    |         |--- priority. Attributes: {op => "", token => "-104"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ELLIPSIS"}
    |    |--- rhs. Attributes: {op => "", token => "'...'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RIGHT_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-105"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RIGHT_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'>>='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LEFT_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-106"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LEFT_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'<<='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ADD_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-107"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ADD_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'+='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<SUB_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-108"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SUB_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'-='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MUL_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-109"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MUL_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'*='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<DIV_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-110"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "DIV_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'/='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MOD_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-111"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MOD_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'%='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<AND_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-112"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "AND_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'&='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<XOR_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-113"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "XOR_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'^='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<OR_ASSIGN>"}
    |         |--- priority. Attributes: {op => "", token => "-114"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "OR_ASSIGN"}
    |    |--- rhs. Attributes: {op => "", token => "'|='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RIGHT_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-115"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RIGHT_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'>>'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LEFT_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-116"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LEFT_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'<<'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<INC_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-117"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "INC_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'++'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<DEC_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-118"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "DEC_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'--'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<PTR_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-119"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "PTR_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'->'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<AND_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-120"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "AND_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'&&'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<OR_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-121"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "OR_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'||'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LE_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-122"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LE_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'<='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GE_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-123"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GE_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'>='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<EQ_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-124"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "EQ_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'=='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<NE_OP>"}
    |         |--- priority. Attributes: {op => "", token => "-125"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "NE_OP"}
    |    |--- rhs. Attributes: {op => "", token => "'!='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<SEMICOLON>"}
    |         |--- priority. Attributes: {op => "", token => "-126"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SEMICOLON"}
    |    |--- rhs. Attributes: {op => "", token => "';'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "'{'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'<%'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LCURLY>"}
    |         |--- priority. Attributes: {op => "", token => "-127"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LCURLY_SCOPE>"}
    |         |--- priority. Attributes: {op => "", token => "-127"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LCURLY_REENTERSCOPE>"}
    |         |--- priority. Attributes: {op => "", token => "-127"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "_LCURLY"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LCURLY_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "_LCURLY"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LCURLY_REENTERSCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "_LCURLY"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_RCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "'}'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'%>'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RCURLY>"}
    |         |--- priority. Attributes: {op => "", token => "-128"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RCURLY_SCOPE>"}
    |         |--- priority. Attributes: {op => "", token => "-128"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RCURLY"}
    |    |--- rhs. Attributes: {op => "", token => "_RCURLY"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RCURLY_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "_RCURLY"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<COMMA>"}
    |         |--- priority. Attributes: {op => "", token => "-129"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "','"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<COLON>"}
    |         |--- priority. Attributes: {op => "", token => "-130"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "':'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<EQUAL>"}
    |         |--- priority. Attributes: {op => "", token => "-131"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "EQUAL"}
    |    |--- rhs. Attributes: {op => "", token => "'='"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "'('"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LPAREN>"}
    |         |--- priority. Attributes: {op => "", token => "-132"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LPAREN_SCOPE>"}
    |         |--- priority. Attributes: {op => "", token => "-132"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "_LPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "_LPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "')'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RPAREN>"}
    |         |--- priority. Attributes: {op => "", token => "-133"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RPAREN_SCOPE>"}
    |         |--- priority. Attributes: {op => "", token => "-133"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "_RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RPAREN_SCOPE"}
    |    |--- rhs. Attributes: {op => "", token => "_RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LBRACKET>"}
    |         |--- priority. Attributes: {op => "", token => "-134"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "'['"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'<:'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<RBRACKET>"}
    |         |--- priority. Attributes: {op => "", token => "-135"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "RBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "']'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "':>'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<DOT>"}
    |         |--- priority. Attributes: {op => "", token => "-136"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "DOT"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<AMPERSAND>"}
    |         |--- priority. Attributes: {op => "", token => "-137"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "AMPERSAND"}
    |    |--- rhs. Attributes: {op => "", token => "'&'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<EXCLAMATION>"}
    |         |--- priority. Attributes: {op => "", token => "-138"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "EXCLAMATION"}
    |    |--- rhs. Attributes: {op => "", token => "'!'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<TILDE>"}
    |         |--- priority. Attributes: {op => "", token => "-139"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "TILDE"}
    |    |--- rhs. Attributes: {op => "", token => "'~'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<HYPHEN>"}
    |         |--- priority. Attributes: {op => "", token => "-140"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "HYPHEN"}
    |    |--- rhs. Attributes: {op => "", token => "'-'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<PLUS>"}
    |         |--- priority. Attributes: {op => "", token => "-141"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "PLUS"}
    |    |--- rhs. Attributes: {op => "", token => "'+'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<STAR>"}
    |         |--- priority. Attributes: {op => "", token => "-142"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STAR"}
    |    |--- rhs. Attributes: {op => "", token => "'*'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<SLASH>"}
    |         |--- priority. Attributes: {op => "", token => "-143"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "SLASH"}
    |    |--- rhs. Attributes: {op => "", token => "'/'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<PERCENT>"}
    |         |--- priority. Attributes: {op => "", token => "-144"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "PERCENT"}
    |    |--- rhs. Attributes: {op => "", token => "'%'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<LESS_THAN>"}
    |         |--- priority. Attributes: {op => "", token => "-145"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "LESS_THAN"}
    |    |--- rhs. Attributes: {op => "", token => "'<'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GREATER_THAN>"}
    |         |--- priority. Attributes: {op => "", token => "-146"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GREATER_THAN"}
    |    |--- rhs. Attributes: {op => "", token => "'>'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<CARET>"}
    |         |--- priority. Attributes: {op => "", token => "-147"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "CARET"}
    |    |--- rhs. Attributes: {op => "", token => "'^'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<VERTICAL_BAR>"}
    |         |--- priority. Attributes: {op => "", token => "-148"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "VERTICAL_BAR"}
    |    |--- rhs. Attributes: {op => "", token => "'|'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<QUESTION_MARK>"}
    |         |--- priority. Attributes: {op => "", token => "-149"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "QUESTION_MARK"}
    |    |--- rhs. Attributes: {op => "", token => "'?'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<C style comment>"}
    |    |--- rhs. Attributes: {op => "", token => "'/*'"}
    |    |--- rhs. Attributes: {op => "", token => "<comment interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'*/'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<comment interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<optional non stars>"}
    |    |--- rhs. Attributes: {op => "", token => "<optional star prefixed segments>"}
    |    |--- rhs. Attributes: {op => "", token => "<optional pre final stars>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<optional non stars>"}
    |    |--- rhs. Attributes: {op => "", token => "[^*]"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<optional star prefixed segments>"}
    |    |--- rhs. Attributes: {op => "", token => "<star prefixed segment>"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<star prefixed segment>"}
    |    |--- rhs. Attributes: {op => "", token => "<stars>"}
    |    |--- rhs. Attributes: {op => "", token => "[^/*]"}
    |    |--- rhs. Attributes: {op => "", token => "<optional star free text>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<stars>"}
    |    |--- rhs. Attributes: {op => "", token => "[*]"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<optional star free text>"}
    |    |--- rhs. Attributes: {op => "", token => "[^*]"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<optional pre final stars>"}
    |    |--- rhs. Attributes: {op => "", token => "[*]"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<Cplusplus style comment>"}
    |    |--- rhs. Attributes: {op => "", token => "'//'"}
    |    |--- rhs. Attributes: {op => "", token => "<Cplusplus comment interior>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<Cplusplus comment interior>"}
    |    |--- rhs. Attributes: {op => "", token => "[^\n]"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS annotation directive start>"}
    |    |--- rhs. Attributes: {op => "", token => "'[source_annotation_attribute'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<MSVS annotation directive interior single line>"}
    |    |--- rhs. Attributes: {op => "", token => "[^\n]"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS annotation directive>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS annotation directive start>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS annotation directive interior single line>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "QUOTE"}
    |    |--- rhs. Attributes: {op => "", token => "[']"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "I_CONSTANT_INSIDE"}
    |    |--- rhs. Attributes: {op => "", token => "[^'\\\n]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "I_CONSTANT_INSIDE"}
    |    |--- rhs. Attributes: {op => "", token => "ES"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "I_CONSTANT_INSIDE_many"}
    |    |--- rhs. Attributes: {op => "", token => "I_CONSTANT_INSIDE"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "BS"}
    |    |--- rhs. Attributes: {op => "", token => "'\'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ANYTHING_ELSE"}
    |    |--- rhs. Attributes: {op => "", token => "[.]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "<Cplusplus style comment>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "<C style comment>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS annotation directive>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "WS_many"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "ANYTHING_ELSE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_ASM>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<ANY_ASM>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "'asm__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "'__asm'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "'__asm__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "'asm'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "_ASM"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ANY_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "_ASM"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "ASM_OPAQUE"}
    |    |--- rhs. Attributes: {op => "", token => "[^\s\S]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_EXTENSION>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_EXTENSION"}
    |    |--- rhs. Attributes: {op => "", token => "'extension__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_EXTENSION"}
    |    |--- rhs. Attributes: {op => "", token => "'__extension'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_EXTENSION"}
    |    |--- rhs. Attributes: {op => "", token => "'__extension__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_BUILTIN_VA_START>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_BUILTIN_VA_START"}
    |    |--- rhs. Attributes: {op => "", token => "'__builtin_va_start'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_BUILTIN_VA_END>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_BUILTIN_VA_END"}
    |    |--- rhs. Attributes: {op => "", token => "'__builtin_va_end'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_BUILTIN_VA_ARG>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_BUILTIN_VA_ARG"}
    |    |--- rhs. Attributes: {op => "", token => "'__builtin_va_arg'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_TYPEOF>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_TYPEOF"}
    |    |--- rhs. Attributes: {op => "", token => "'typeof'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_TYPEOF"}
    |    |--- rhs. Attributes: {op => "", token => "'__typeof'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_TYPEOF"}
    |    |--- rhs. Attributes: {op => "", token => "'__typeof__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_BUILTIN_OFFSETOF>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_BUILTIN_OFFSETOF"}
    |    |--- rhs. Attributes: {op => "", token => "'__builtin_offsetof'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC_BUILTIN_VA_LIST>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_BUILTIN_VA_LIST"}
    |    |--- rhs. Attributes: {op => "", token => "'__builtin_va_list'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "'__alignof__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "'alignof__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "'__alignof'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "GCC_ALIGNOF"}
    |    |--- rhs. Attributes: {op => "", token => "'alignof'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_FASTCALL>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_FASTCALL"}
    |    |--- rhs. Attributes: {op => "", token => "'__fastcall'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_THISCALL>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_THISCALL"}
    |    |--- rhs. Attributes: {op => "", token => "'__thiscall'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_BASED>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_BASED"}
    |    |--- rhs. Attributes: {op => "", token => "'__based'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_CDECL>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_CDECL"}
    |    |--- rhs. Attributes: {op => "", token => "'__cdecl'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_CLRCALL>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_CLRCALL"}
    |    |--- rhs. Attributes: {op => "", token => "'__clrcall'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS___C_ASSERT__>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS___C_ASSERT__"}
    |    |--- rhs. Attributes: {op => "", token => "'__C_ASSERT__'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_STDCALL>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_STDCALL"}
    |    |--- rhs. Attributes: {op => "", token => "'__stdcall'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_INT8>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_INT8"}
    |    |--- rhs. Attributes: {op => "", token => "'__int8'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_INT16>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_INT16"}
    |    |--- rhs. Attributes: {op => "", token => "'__int16'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_INT32>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_INT32"}
    |    |--- rhs. Attributes: {op => "", token => "'__int32'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_INT64>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_INT64"}
    |    |--- rhs. Attributes: {op => "", token => "'__int64'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_W64>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_W64"}
    |    |--- rhs. Attributes: {op => "", token => "'__w64'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_PTR32>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_PTR32"}
    |    |--- rhs. Attributes: {op => "", token => "'__ptr32'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":lexeme"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS_PTR64>"}
    |         |--- priority. Attributes: {op => "", token => "-60"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "MSVS_PTR64"}
    |    |--- rhs. Attributes: {op => "", token => "'__ptr64'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccBuiltinType"}
    |    |--- rhs. Attributes: {op => "", token => "gccTypeof"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_BUILTIN_VA_LIST"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmStatement"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmExpression"}
    |    |--- rhs. Attributes: {op => "", token => "SEMICOLON"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmExpression"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "GOTO"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerLabelList"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmClobberList"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmClobber"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmClobberList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmClobber"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperand"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperand"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmInnerClobberList"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmClobberList"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmInnerOperandList2"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerClobberList"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperandList"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerClobberList"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmInnerOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerOperandList2"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperandList"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperandList"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerOperandList2"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmInnerLabelList"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "COLON"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmInnerLabelList"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmOperandPrefix"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmOperand"}
    |    |--- rhs. Attributes: {op => "", token => "string"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "gccAsmOperandPrefix"}
    |    |--- rhs. Attributes: {op => "", token => "string"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccAsmClobber"}
    |    |--- rhs. Attributes: {op => "", token => "string"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccStatementExpression"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "compoundStatement"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccArrayTypeModifier"}
    |    |--- rhs. Attributes: {op => "", token => "typeQualifier"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccBuiltinVaStart"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_BUILTIN_VA_START"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccBuiltinVaEnd"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_BUILTIN_VA_END"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccBuiltinVaArg"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_BUILTIN_VA_ARG"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccTypeof"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_TYPEOF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_TYPEOF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "assignmentExpression"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "gccBuiltinOffsetof"}
    |    |--- rhs. Attributes: {op => "", token => "GCC_BUILTIN_OFFSETOF"}
    |    |--- rhs. Attributes: {op => "", token => "LPAREN"}
    |    |--- rhs. Attributes: {op => "", token => "typeName"}
    |    |--- rhs. Attributes: {op => "", token => "COMMA"}
    |    |--- rhs. Attributes: {op => "", token => "offsetofMemberDesignator"}
    |    |--- rhs. Attributes: {op => "", token => "RPAREN"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "offsetofMemberDesignator"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "offsetofMemberDesignator"}
    |    |--- rhs. Attributes: {op => "", token => "DOT"}
    |    |--- rhs. Attributes: {op => "", token => "IDENTIFIER_UNAMBIGUOUS"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "offsetofMemberDesignator"}
    |    |--- rhs. Attributes: {op => "", token => "LBRACKET"}
    |    |--- rhs. Attributes: {op => "", token => "expression"}
    |    |--- rhs. Attributes: {op => "", token => "RBRACKET"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "msvsAttribute"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_FASTCALL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_BASED"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_CDECL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_CLRCALL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_STDCALL"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_THISCALL"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "msvsBuiltinType"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_INT8"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_INT16"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_INT32"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "MSVS_INT64"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "opaqueAsmStatement"}
    |    |--- rhs. Attributes: {op => "", token => "ANY_ASM"}
    |    |--- rhs. Attributes: {op => "", token => "ASM_OPAQUE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<Cpp style directive start>"}
    |    |--- rhs. Attributes: {op => "", token => "'#'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<Cpp style directive interior single line>"}
    |    |--- rhs. Attributes: {op => "", token => "[^\n]"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<Cpp style directive>"}
    |    |--- rhs. Attributes: {op => "", token => "<Cpp style directive start>"}
    |    |--- rhs. Attributes: {op => "", token => "<Cpp style directive interior single line>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "<Cpp style directive>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 identifier>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "_IDENTIFIER"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<_G0 number>"}
    |    |--- rhs. Attributes: {op => "", token => "[\d]"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 number>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "<_G0 number>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 string unit>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'"'"}
    |    |--- rhs. Attributes: {op => "", token => "STRING_LITERAL_INSIDE_any"}
    |    |--- rhs. Attributes: {op => "", token => "'"'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string unit>"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<_G0 word>"}
    |    |--- rhs. Attributes: {op => "", token => "[\w]"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 word>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "<_G0 word>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<G0 words>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 word>"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STRING_LITERAL_INSIDE2"}
    |    |--- rhs. Attributes: {op => "", token => "[^<>\\\n]"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "STRING_LITERAL_INSIDE2"}
    |    |--- rhs. Attributes: {op => "", token => "ES"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "STRING_LITERAL_INSIDE2_any"}
    |    |--- rhs. Attributes: {op => "", token => "STRING_LITERAL_INSIDE2"}
    |         |--- quantifier. Attributes: {op => "", token => "*"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 string unit 2>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'<'"}
    |    |--- rhs. Attributes: {op => "", token => "STRING_LITERAL_INSIDE2_any"}
    |    |--- rhs. Attributes: {op => "", token => "'>'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 string 2>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string unit 2>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 mul assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'*='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 div assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'/='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 mod assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'%='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 add assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'+='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 sub assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'-='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 left assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'<<='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 right assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'>>='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 and assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'&='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 xor assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'^='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 or assign>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'|='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 or op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'||'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 and op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'&&'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 vertical bar>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'|'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 caret>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'^'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 ampersand>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'&'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 eq op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'=='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 ne op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'!='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 less than>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'<'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 greater than>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'>'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 le op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'<='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 ge op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'>='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 left op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'<<'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 right op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'>>'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 plus>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'+'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 hyphen>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'-'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 star>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'*'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 slash>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'/'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 percent>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'%'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'('"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 rparen>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "')'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 lcurly>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'{'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 rcurly>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'}'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 lbracket>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'['"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 rbracket>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "']'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 inc op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'++'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 dec op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'--'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 ptr op>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'->'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 dot>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 exclamation>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'!'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 tilde>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'~'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 generic>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'_Generic'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 default>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'default'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 ellipsis>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'...'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 sizeof>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'sizeof'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 alignof>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'_Alignof'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'__alignof__'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'alignof__'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'__alignof'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'alignof'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "','"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 equal>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'='"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 colon>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "':'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 semicolon>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "';'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 question mark>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'?'"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 I_CONSTANT>"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "BP"}
    |    |--- rhs. Attributes: {op => "", token => "B_many"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "NZ"}
    |    |--- rhs. Attributes: {op => "", token => "D_any"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'0'"}
    |    |--- rhs. Attributes: {op => "", token => "O_any"}
    |    |--- rhs. Attributes: {op => "", token => "IS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "CP_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "QUOTE"}
    |    |--- rhs. Attributes: {op => "", token => "I_CONSTANT_INSIDE_many"}
    |    |--- rhs. Attributes: {op => "", token => "QUOTE"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 F_CONSTANT>"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |    |--- rhs. Attributes: {op => "", token => "E"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "D_any"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |    |--- rhs. Attributes: {op => "", token => "E_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "D_many"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "E_maybe"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "P"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_any"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "P"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "HP"}
    |    |--- rhs. Attributes: {op => "", token => "H_many"}
    |    |--- rhs. Attributes: {op => "", token => "'.'"}
    |    |--- rhs. Attributes: {op => "", token => "P"}
    |    |--- rhs. Attributes: {op => "", token => "FS_maybe"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 constant>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 I_CONSTANT>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 F_CONSTANT>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma>"}
    |    |--- rhs. Attributes: {op => "", token => "'__pragma'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive alloc_text>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive auto_inline>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive check_stack>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive comment>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive deprecated>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive detect_mismatch>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive fenv_access>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive float_control>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive fp_contract>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive function>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive hdrstop>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive include_alias>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive inline_depth>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive inline_recursion>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive intrinsic>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive loop>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive make_public>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive managed>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive unmanaged>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive message>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive once>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive optimize>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pointers_to_members>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pop_macro>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive push_macro>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive region>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive endregion>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive runtime_checks>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive section>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive setlocale>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive strict_gs_check>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive vtordisp>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive alloc_text>"}
    |    |--- rhs. Attributes: {op => "", token => "'alloc_text'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive alloc_text interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive alloc_text interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive alloc_text interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive alloc_text identifier list>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive alloc_text identifier list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive alloc_text identifier list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive auto_inline>"}
    |    |--- rhs. Attributes: {op => "", token => "'auto_inline'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'auto_inline'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive auto_inline interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive auto_inline interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning>"}
    |    |--- rhs. Attributes: {op => "", token => "'warning'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior specifier list>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior push>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior pop>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning interior specifier list>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior specifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior specifier list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 semicolon>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior specifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning interior specifier keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "'1'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'2'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'3'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'4'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'default'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'disable'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'error'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'once'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'suppress'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning interior specifier>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior specifier keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 colon>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior specifier number list>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning interior specifier number list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive warning interior specifier number list>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_many"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning interior push>"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive warning interior pop>"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive common seg push or pop>"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive common seg interior 1>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg push or pop>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg push or pop>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive common seg interior 2>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive common seg interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg interior 1>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg interior 2>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg interior 1>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg interior 2>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive common seg>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive common seg interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive common seg keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "'bss_seg'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'code_seg'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'const_seg'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'data_seg'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive check_stack interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'+'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'-'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive check_stack>"}
    |    |--- rhs. Attributes: {op => "", token => "'check_stack'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'check_stack'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive check_stack interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive comment interior type>"}
    |    |--- rhs. Attributes: {op => "", token => "'compiler'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'exestr'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'lib'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'linker'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'user'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive comment interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive comment interior type>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive comment interior type>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive comment>"}
    |    |--- rhs. Attributes: {op => "", token => "'comment'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive comment interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive component interior name>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive component interior browser on off>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive component interior browser>"}
    |    |--- rhs. Attributes: {op => "", token => "'browser'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior browser on off>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'browser'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior browser on off>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "'references'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'browser'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior browser on off>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "'references'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior name>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive component interior minrebuild>"}
    |    |--- rhs. Attributes: {op => "", token => "'minrebuild'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior browser on off>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive component interior mintypeinfo>"}
    |    |--- rhs. Attributes: {op => "", token => "'mintypeinfo'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior browser on off>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive component interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior browser>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior minrebuild>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior mintypeinfo>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive component>"}
    |    |--- rhs. Attributes: {op => "", token => "'component'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive component interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform interior name>"}
    |    |--- rhs. Attributes: {op => "", token => "'forScope'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform interior show>"}
    |    |--- rhs. Attributes: {op => "", token => "'show'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform interior on off>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform interior push pop>"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior name>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior name>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior optional>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform interior optional unit>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior show>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior on off>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior push pop>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform interior optional>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior optional unit>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior optional>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior optional unit>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive conform>"}
    |    |--- rhs. Attributes: {op => "", token => "'conform'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive conform interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive deprecated interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive deprecated interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive deprecated>"}
    |    |--- rhs. Attributes: {op => "", token => "'deprecated'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive deprecated interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive detect_mismatch interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive detect_mismatch>"}
    |    |--- rhs. Attributes: {op => "", token => "'detect_mismatch'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive detect_mismatch interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive fenv_access interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'ON'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'OFF'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive fenv_access>"}
    |    |--- rhs. Attributes: {op => "", token => "'fenv_access'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'fenv_access'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'fenv_access'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive fenv_access interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive float_control interior value>"}
    |    |--- rhs. Attributes: {op => "", token => "'precise'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'except'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive float_control interior setting>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive float_control interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive float_control interior value>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive float_control interior setting>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive float_control interior value>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive float_control interior setting>"}
    |    |--- rhs. Attributes: {op => "", token => "WS_any"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive float_control>"}
    |    |--- rhs. Attributes: {op => "", token => "'float_control'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive float_control interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive fp_contract interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'ON'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'OFF'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive fp_contract>"}
    |    |--- rhs. Attributes: {op => "", token => "'fp_contract'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'fp_contract'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'fp_contract'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive fp_contract interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive function interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive function interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive function>"}
    |    |--- rhs. Attributes: {op => "", token => "'function'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive function interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive hdrstop interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive hdrstop>"}
    |    |--- rhs. Attributes: {op => "", token => "'hdrstop'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'hdrstop'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive hdrstop interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive include_alias interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string 2>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string 2>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive include_alias>"}
    |    |--- rhs. Attributes: {op => "", token => "'include_alias'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive include_alias interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive inline_depth interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive inline_depth>"}
    |    |--- rhs. Attributes: {op => "", token => "'inline_depth'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'inline_depth'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive inline_depth interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive inline_recursion interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive inline_recursion>"}
    |    |--- rhs. Attributes: {op => "", token => "'inline_recursion'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'inline_recursion'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive inline_recursion interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive intrinsic interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive intrinsic interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive intrinsic>"}
    |    |--- rhs. Attributes: {op => "", token => "'intrinsic'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive intrinsic interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive loop interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'hint_parallel'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'no_vector'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'ivdep'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive loop>"}
    |    |--- rhs. Attributes: {op => "", token => "'loop'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive loop interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive make_public interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive make_public>"}
    |    |--- rhs. Attributes: {op => "", token => "'make_public'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive make_public interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive managed interior on off>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive managed interior>"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive managed interior on off>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive managed interior on off>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive managed>"}
    |    |--- rhs. Attributes: {op => "", token => "'managed'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'managed'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'managed'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive managed interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive unmanaged>"}
    |    |--- rhs. Attributes: {op => "", token => "'unmanaged'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'unmanaged'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive message interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive message>"}
    |    |--- rhs. Attributes: {op => "", token => "'message'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive message interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive once>"}
    |    |--- rhs. Attributes: {op => "", token => "'once'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'once'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive optimize interior optimizationList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive optimize interior on off>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive optimize interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive optimize interior optimizationList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive optimize interior on off>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive optimize>"}
    |    |--- rhs. Attributes: {op => "", token => "'optimize'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive optimize interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pack interior show>"}
    |    |--- rhs. Attributes: {op => "", token => "'show'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pack interior 1>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack interior show>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pack interior push pop>"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pack interior 21>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack interior push pop>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack interior push pop>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pack interior 2>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack interior 21>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pack interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack interior 1>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack interior 2>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pack>"}
    |    |--- rhs. Attributes: {op => "", token => "'pack'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pack'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pack interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pointers_to_members interior pointer declaration>"}
    |    |--- rhs. Attributes: {op => "", token => "'full_generality'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'best_case'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pointers_to_members interior most general representation>"}
    |    |--- rhs. Attributes: {op => "", token => "'single_inheritance'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'multiple_inheritance'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'virtual_inheritance'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pointers_to_members interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pointers_to_members interior pointer declaration>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pointers_to_members interior pointer declaration>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pointers_to_members interior most general representation>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pointers_to_members>"}
    |    |--- rhs. Attributes: {op => "", token => "'pointers_to_members'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive pointers_to_members interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive pop_macro>"}
    |    |--- rhs. Attributes: {op => "", token => "'pop_macro'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive push_macro>"}
    |    |--- rhs. Attributes: {op => "", token => "'push_macro'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive region interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive region>"}
    |    |--- rhs. Attributes: {op => "", token => "'region'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'region'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'region'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive region interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive endregion interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive endregion>"}
    |    |--- rhs. Attributes: {op => "", token => "'endregion'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'endregion'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'endregion'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive endregion interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive runtime_checks interior optimizationList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive runtime_checks interior on off>"}
    |    |--- rhs. Attributes: {op => "", token => "'restore'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive runtime_checks interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive runtime_checks interior optimizationList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive runtime_checks interior on off>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive runtime_checks>"}
    |    |--- rhs. Attributes: {op => "", token => "'runtime_checks'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive runtime_checks interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive section interior attribute>"}
    |    |--- rhs. Attributes: {op => "", token => "'read'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'write'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'execute'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'shared'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'nopage'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'nocache'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'discard'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'remove'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive section interior attribute list>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive section interior attribute>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive section interior attribute list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive section interior attribute>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive section interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive section interior attribute list>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive section>"}
    |    |--- rhs. Attributes: {op => "", token => "'section'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive section interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive setlocale interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive setlocale>"}
    |    |--- rhs. Attributes: {op => "", token => "'setlocale'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive setlocale interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive strict_gs_check interior on off>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive strict_gs_check interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive strict_gs_check interior on off>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive strict_gs_check interior on off>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive strict_gs_check>"}
    |    |--- rhs. Attributes: {op => "", token => "'strict_gs_check'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive strict_gs_check interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive vtordisp interior on off number>"}
    |    |--- rhs. Attributes: {op => "", token => "'on'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'off'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive vtordisp interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive vtordisp interior on off number>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'push'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive vtordisp interior on off number>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'pop'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS pragma directive vtordisp>"}
    |    |--- rhs. Attributes: {op => "", token => "'vtordisp'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'vtordisp'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'vtordisp'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma directive vtordisp interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS pragma>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec>"}
    |    |--- rhs. Attributes: {op => "", token => "'__declspec'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec directive>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec directive>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec align>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec allocate>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec appdomain>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec deprecated>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec dllexport>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec dllimport>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec jitintrinsic>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec naked>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec noalias>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec noinline>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec noreturn>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec nothrow>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec novtable>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec process>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec property>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec restrict>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec safebuffers>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec selectany>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec thread>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec uuid>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec align>"}
    |    |--- rhs. Attributes: {op => "", token => "'align'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 number>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec allocate>"}
    |    |--- rhs. Attributes: {op => "", token => "'allocate'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec appdomain>"}
    |    |--- rhs. Attributes: {op => "", token => "'appdomain'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec deprecated>"}
    |    |--- rhs. Attributes: {op => "", token => "'deprecated'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'deprecated'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'deprecated'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec dllexport>"}
    |    |--- rhs. Attributes: {op => "", token => "'dllexport'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec dllimport>"}
    |    |--- rhs. Attributes: {op => "", token => "'dllimport'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec jitintrinsic>"}
    |    |--- rhs. Attributes: {op => "", token => "'jitintrinsic'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec naked>"}
    |    |--- rhs. Attributes: {op => "", token => "'naked'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec noalias>"}
    |    |--- rhs. Attributes: {op => "", token => "'noalias'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec noinline>"}
    |    |--- rhs. Attributes: {op => "", token => "'noinline'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec noreturn>"}
    |    |--- rhs. Attributes: {op => "", token => "'noreturn'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec nothrow>"}
    |    |--- rhs. Attributes: {op => "", token => "'nothrow'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec novtable>"}
    |    |--- rhs. Attributes: {op => "", token => "'novtable'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec process>"}
    |    |--- rhs. Attributes: {op => "", token => "'process'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec property interior get put>"}
    |    |--- rhs. Attributes: {op => "", token => "'get'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'put'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec property interior>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec property interior get put>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 equal>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec property interior list>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec property interior>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec property interior list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec property interior>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec property>"}
    |    |--- rhs. Attributes: {op => "", token => "'property'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec property interior list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec restrict>"}
    |    |--- rhs. Attributes: {op => "", token => "'restrict'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec safebuffers>"}
    |    |--- rhs. Attributes: {op => "", token => "'safebuffers'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec selectany>"}
    |    |--- rhs. Attributes: {op => "", token => "'selectany'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec thread>"}
    |    |--- rhs. Attributes: {op => "", token => "'thread'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<MSVS declspec uuid>"}
    |    |--- rhs. Attributes: {op => "", token => "'uuid'"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => ":discard"}
    |    |--- rhs. Attributes: {op => "", token => "<MSVS declspec>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<GCC attribute keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "'__attribute__'"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "'__attribute'"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<GCC attribute>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute keyword>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<GCC attribute list>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute unit>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute list>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute unit>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<GCC attribute unit>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 word>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 word>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 word>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute parameters>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<GCC attribute parameters>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute parameters expressions>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute parameters expressions>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<GCC attribute parameters expressions>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute parameters expression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute parameters expressions>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<GCC attribute parameters expression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<GCC attribute parameters expression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 expression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 expression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 expression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 assignmentExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 conditionalExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 unaryExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentOperator>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 assignmentOperator>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 equal>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 mul assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 div assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 mod assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 add assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 sub assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 left assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 right assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 and assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 xor assign>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 or assign>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 conditionalExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 logicalOrExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 logicalOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 question mark>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 expression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 colon>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 conditionalExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 logicalOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 question mark>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 colon>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 conditionalExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 logicalOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 logicalAndExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 logicalOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 or op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 logicalAndExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 logicalAndExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 inclusiveOrExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 logicalAndExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 and op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 inclusiveOrExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 inclusiveOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 exclusiveOrExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 inclusiveOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 vertical bar>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 exclusiveOrExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 exclusiveOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 andExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 exclusiveOrExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 caret>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 andExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 andExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 equalityExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 andExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 ampersand>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 equalityExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 equalityExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 relationalExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 equalityExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 eq op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 relationalExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 equalityExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 ne op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 relationalExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 relationalExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 shiftExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 relationalExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 less than>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 shiftExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 relationalExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 greater than>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 shiftExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 relationalExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 le op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 shiftExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 relationalExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 ge op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 shiftExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 shiftExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 additiveExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 shiftExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 left op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 additiveExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 shiftExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 right op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 additiveExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 additiveExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 multiplicativeExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 additiveExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 plus>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 multiplicativeExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 additiveExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 hyphen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 multiplicativeExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 multiplicativeExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 castExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 multiplicativeExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 star>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 castExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 multiplicativeExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 slash>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 castExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 multiplicativeExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 percent>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 castExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 castExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 unaryExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 words>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 castExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 unaryOperator>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 ampersand>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 star>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 plus>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 hyphen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 tilde>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 exclamation>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 unaryExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 inc op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 unaryExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 dec op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 unaryExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 unaryOperator>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 castExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 sizeof>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 unaryExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 sizeof>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 words>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 alignof>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 words>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 primaryExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lbracket>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 expression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rbracket>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 argumentExpressionList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 dot>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 ptr op>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 inc op>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 postfixExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 dec op>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 words>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lcurly>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializerList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rcurly>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 words>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lcurly>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializerList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rcurly>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 primaryExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 constant>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 string>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 expression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 genericSelection>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 argumentExpressionList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 argumentExpressionList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 argumentExpressionList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 genericSelection>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 generic>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lparen>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 genericAssocList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rparen>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 genericAssocList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 genericAssociation>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 genericAssocList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 genericAssociation>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 genericAssociation>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 words>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 colon>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 default>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 colon>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 initializerList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 designation>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializer>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializer>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 colon>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializer>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializerList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 designation>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializer>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializerList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializer>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 initializer>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lcurly>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializerList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rcurly>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lcurly>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 initializerList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 comma>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rcurly>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 assignmentExpression>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 designation>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 designatorList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 equal>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "~", token => "<G0 designatorList>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 designator>"}
    |         |--- quantifier. Attributes: {op => "", token => "+"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 designator>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lbracket>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 constantExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rbracket>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 dot>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 identifier>"}
    |    |--- alternative. Attributes: {token => "|"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 lbracket>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 constantExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 ellipsis>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 constantExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 rbracket>"}
    |--- statement. Attributes: {token => "statement"}
    |    |--- lhs. Attributes: {op => "::=", token => "<G0 constantExpression>"}
    |    |--- rhs. Attributes: {op => "", token => "<G0 conditionalExpression>"}
    |--- statement. Attributes: {token => "statement"}
         |--- lhs. Attributes: {op => "~", token => ":discard"}
         |--- rhs. Attributes: {op => "", token => "<GCC attribute>"}
